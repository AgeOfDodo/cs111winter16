README

CS 111 Operating Systems Principles, Winter 2016
Sunnie So <704430286>

Lab 1

----------------------------------------------------------------------
This submission is for lab 1a, which is the first part of lab 1.

It can be built using make, and run using ./simpsh 

We have implemented the --wronly, --rdonly, --command, and 
--verbose flags using the appropriate commands as outlined
in the specification on the class website. The --wait command
is in progress but not currently working.

Our testing is in test.sh, which can be invoked using "make check".

We implemented the Makefile such that the user can use "make", "make check",
"make clean", "make dist" as specified in the spec. There are currently
no tests run for "make dist". 

----------------------------------------------------------------------

Lab1b:

--wait: 
	I used waitpid() to reap the zombie child processes and obtain their exit 
	status. However, waitpid() can not tell us which command it executed. Therefore,
	I implemented a data structure "waitInfo" that stores the child pid, command name, 
	and the argument list. When the program reaches --wait option, it can look up the 
	commend and arguments using the child pid that waitpid() returns. 
	I dynamically constructed an array of "waitInfo" to keep track of all "waitInfo" 
	data. When a child process is created, the parent process records the corresponding
	values into a new "waitInfo" in the waitInfo array.

--pipe
	The "real" pipe descripters are stored in the same manner as regular file descripters
	do in fd_array. In addition, I also declared isPipe array to differentiate a pipe 
	descripter and file descripter. if fd is a pipe descripter, then isPipe[fd]=1. 
	Otherwise it is 0. This is needed for --command to check if any of input, output, 
	error are pipe ends.

--command
	Using isPipe values, check any of input, output, error are pipe ends. If any of them
	is pipe end, then close the other end of the pipe as well. 

--ignore,
--default,
--catch,
--pause
	Implemented using sigaction() and handler

--abort
	hard coded a segmentation fault.
-----------------------------------------------------------------------

Lab1c: To be continue...